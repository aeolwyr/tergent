//! Types related to PKCS#11.
//! This module was originally automatically generated by rust-bindgen,
//! however it is now heavily modified.

use std::convert::TryInto;
use std::os::raw::c_ulong;
use std::slice;

pub const CRYPTOKI_VERSION_MAJOR: u32 = 2;
pub const CRYPTOKI_VERSION_MINOR: u32 = 40;
pub const _CRYPTOKI_VERSION_AMENDMENT: u32 = 0;
pub const UNAVAILABLE_INFORMATION: i32 = -1;
pub const _EFFECTIVELY_INFINITE: u32 = 0;
pub const _INVALID_HANDLE: u32 = 0;
pub const _NEED_ARG_LIST: u32 = 1;
//pub const CKZ_DATA_SPECIFIED: u32 = 1;
//pub const CKZ_SALT_SPECIFIED: u32 = 1;

mod notification;
pub use notification::Notification;
mod user_type;
pub use user_type::UserType;
mod session_state;
pub use session_state::SessionState;
mod flags;
pub use flags::Flags;
mod object_class;
pub use object_class::ObjectClass;
mod hardware_feature_type;
pub use hardware_feature_type::HardwareFeatureType;
mod key_type;
pub use key_type::KeyType;
mod certificate_category;
pub use certificate_category::CertificateCategory;
mod security_domain;
pub use security_domain::SecurityDomain;
mod certificate_type;
pub use certificate_type::CertificateType;
mod attribute_type;
pub mod otp;
pub use attribute_type::AttributeType;
mod mechanism_type;
pub use mechanism_type::MechanismType;
mod return_value;
pub use return_value::ReturnValue;
mod mask_generation_function;
pub use mask_generation_function::MaskGenerationFunction;
mod key_derivation_function;
pub use key_derivation_function::KeyDerivationFunction;
mod pseudo_random_function;
pub use pseudo_random_function::PseudoRandomFunction;
mod types;
pub use types::*;

impl Attribute {
    /// Sets the value field of this attribute. Returns `None`
    /// if the attribute does not have enough space to store this value.
    ///
    /// # Safety
    /// As attribute does not own the value field (instead it contains a pointer)
    /// any safety considerations regarding pointers apply.
    pub fn set_value(&mut self, value: &[u8]) -> Option<()> {
        let len: c_ulong = value.len().try_into().ok()?;
        if self.value.is_null() {
            self.value_len = len;
            return Some(());
        }

        if self.value_len < len {
            return None;
        }

        let v = self.value as *mut u8;
        let v = unsafe { slice::from_raw_parts_mut(v, value.len()) };
        v.copy_from_slice(value);
        self.value_len = len;
        Some(())
    }

    /// Sets the value of this attribute to the given value. Use `set_value` if you
    /// need to set a slice instead.
    ///
    /// # Safety
    /// Attribute values are pointers, therefore any safety considerations
    /// regarding pointers apply.
    pub fn set_value_single(&mut self, value: c_ulong) {
        let val = self.value as *mut c_ulong;
        unsafe {
            *val = value;
        }
    }
}

/// Copy a string to the target slice. If the slice is larger than the size required
/// by the string, the rest is filled with empty space.
pub fn copy_padded(target: &mut [u8], data: &str) {
    let data = data.as_bytes();
    let (left, right) = target.split_at_mut(data.len());
    for a in right.iter_mut() {
        *a = 32;
    }
    left.copy_from_slice(data);
}
